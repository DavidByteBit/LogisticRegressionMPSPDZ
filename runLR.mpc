from Compiler import ml

# NOTE: This script should not be run alone. The entry point to run the program is in run.py.
#       run.py must be run first for the sake of some book-keeping; for example, run.py will
#       have Alice and Bob populate their private input files which allows for us to combine
#       their horizontally partitioned data into one dataset.

ALICE = 0
BOB = 1

# PURELY FOR TESTING PURPOSES - reduces the amount of data going in by a factor of n to test compilers
# ability to work with different loads
reduce_set = 13 # Anything lower than 49 does not work...

# No traditional command line arguments? Solution is to re-write the script
# using another python script which can also act as the entry point
# @args
alice_examples = 831
bob_examples = 882
n_features = 1875
n_epochs = 13
# end@args

n_examples = alice_examples + bob_examples



sgd = ml.SGD([ml.Dense(n_examples//reduce_set, n_features//reduce_set, 1),
              ml.Output(n_examples//reduce_set, approx=True)], n_epochs,
             report_loss=True)


# original code uses
# sgd.layers[0].X.input_from(0)
# sgd.layers[1].Y.input_from(1)
# But how will this work? It seems like it only take a single example. Maybe it's more intelligent than that,
# but I am not sure yet

# # sint because inputs are binary
# data = Matrix(n_examples, n_features, sint)

# Load data from Alice first, then Bob
@for_range_opt(alice_examples//reduce_set)
def _(i):
    @for_range_opt(n_features//reduce_set)
    def _(j):
        # data[i][j] = sint.get_input_from(ALICE)
        sgd.layers[0].X.input_from(ALICE)

print("\n\n Alice's data is loaded \n\n")

@for_range_opt(bob_examples//reduce_set)
def _(i):
    @for_range_opt(n_features//reduce_set)
    def _(j):
        # data[i][j] = sint.get_input_from(BOB)
        sgd.layers[0].X.input_from(BOB)

print("\n\n Bobs data is loaded \n\n")

# labels = Array(n_examples, sint)

# Load labels from alice first to ensure that the labels remain parallel to the dataset
@for_range_opt(alice_examples//reduce_set)
def _(i):
    # labels[i] = sint.get_input_from(ALICE)
    sgd.layers[1].Y.input_from(ALICE)

print("\n\n Alice's labels is loaded \n\n")

@for_range_opt(bob_examples//reduce_set)
def _(i):
    # labels[i] = sint.get_input_from(BOB)
    sgd.layers[1].Y.input_from(BOB)

print("\n\n Bobs labels is loaded \n\n")


# sgd.layers[0].X.input_from(0)
# sgd.layers[1].Y.input_from(1)
# sgd.reset() # <--- Causes register overflow?
sgd.run()
