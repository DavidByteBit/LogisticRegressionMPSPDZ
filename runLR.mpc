from Compiler import ml
import math

# NOTE: This script should not be run alone. The entry point to run the program is in run.py.
#       run.py must be run first for the sake of some book-keeping; for example, run.py will
#       have Alice and Bob populate their private input files which allows for us to combine
#       their horizontally partitioned data into one dataset.


ALICE = 0
BOB = 1

n_threads = 8

# It appears that batching is maxed out at 128
max_batch = 128

# No traditional command line arguments? Solution is to re-write the script
# using another python script which can also act as the entry point
# @args
alice_examples = 831
bob_examples = 882
n_features = 1875
n_epochs = 13
folds = 5
# end@args

n_examples = alice_examples + bob_examples

train_size_alice = alice_examples

train_size_bob = bob_examples

# print_ln("%s", train_size)

data_train = Matrix(n_examples, n_features, sfix)

label_train = Array(n_examples, sfix)

print_ln("\ttrain size: %s", n_examples)
print_ln("\ttrain_size_alice: %s ", train_size_alice)
print_ln("\ttrain_size_bob: %s ", train_size_bob)


# Reference: self.X = MultiArray([N, d, d_in], sfix)

# First: Training features
@for_range(train_size_alice)
def _(i):
    @for_range(n_features)
    def _(j):
        data_train[i][j] = sfix.get_input_from(ALICE)

@for_range(train_size_alice)
def _(i):
    label_train[i] = sfix.get_input_from(ALICE)


@for_range(train_size_bob)
def _(i):
    @for_range(n_features)
    def _(j):
        data_train[train_size_alice + i][j] = sfix.get_input_from(BOB)

@for_range(train_size_bob)
def _(i):
    label_train[train_size_alice + i] = sfix.get_input_from(BOB)


print_ln("%s", "\n\n Data populated \n\n")

# Test to see if Alice or Bob are using ALL data allocated to them.
# If this code is uncommented, we should crash at runtime
# test = sfix.get_input_from(ALICE)
# test = sfix.get_input_from(BOB)
# print_ln("%s", "\n\n WARNING DID NOT CRASH - Something may be wrong with the size of the private input files\n\n")

# batch_list_order_train = Array(train_size, regint)
#
#
# # Step 1: First, create a list of indices
# @for_range(train_size)
# def _(i):
#     batch_list_order_train[i] = regint(i)
#
# print_ln("%s", batch_list_order_train[0:5])

# Define logistic regression model
sgd = ml.SGD([ml.Dense(n_examples, n_features, 1),
              ml.Output(n_examples, approx=True)], n_epochs,
             report_loss=True)

sgd.reset()  # <--- Can cause register overflow?


sgd.layers[0].X.assign(data_train)
sgd.layers[1].Y.assign(label_train)

print_ln("%s", sgd.layers[0].X.reveal_nested()[0:20])
print_ln("%s", sgd.layers[1].Y.reveal_nested()[0:20])

# Populate layers with training data
# @for_range_opt(n_examples)
# def _(i):
#     @for_range_opt(n_features)
#     def _(j):
#         sgd.layers[0].X[i][0][j] = data_train[i][j]  # Check out [i][j][0] and others
#     sgd.layers[1].Y[i] = label_train[i]


sgd.run()

# For classification
print_ln("Training finished")
print_ln("%s", n_epochs)
print_ln("%s", sgd.layers[0].b[0].reveal())
print_ln("%s", sgd.layers[0].W.reveal_nested())
