from Compiler import ml
import math

# NOTE: This script should not be run alone. The entry point to run the program is in run.py.
#       run.py must be run first for the sake of some book-keeping; for example, run.py will
#       have Alice and Bob populate their private input files which allows for us to combine
#       their horizontally partitioned data into one dataset.


ALICE = 0
BOB = 1

n_threads = 8

# It appears that batching is maxed out at 128
max_batch = 128

# No traditional command line arguments? Solution is to re-write the script
# using another python script which can also act as the entry point
# @args
alice_examples = 831
bob_examples = 882
n_features = 1875
n_epochs = 13
folds = 5
# end@args

n_examples = alice_examples + bob_examples

train_size_alice = alice_examples

train_size_bob = bob_examples

# print_ln("%s", train_size)

print_ln("\ttrain size: %s", n_examples)
print_ln("\ttrain_size_alice: %s ", train_size_alice)
print_ln("\ttrain_size_bob: %s ", train_size_bob)


# Define logistic regression model
sgd = ml.SGD([ml.Dense(alice_examples, n_features, 1),
              ml.Output(alice_examples, approx=True)], n_epochs,
             report_loss=True, debug=True)

sgd.reset()  # <--- Can cause register overflow?


sgd.layers[0].X.input_from(ALICE)
sgd.layers[1].Y.input_from(BOB)

sgd.run()

# For classification
print_ln("Training finished")
print_ln("%s", n_epochs)
print_ln("%s", sgd.layers[0].N)
print_ln("%s", sgd.layers[0].b[0].reveal())
print_ln("%s", sgd.layers[0].W.reveal_nested())
