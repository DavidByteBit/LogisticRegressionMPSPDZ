from Compiler import ml

# NOTE: This script should not be run alone. The entry point to run the program is in run.py.
#       run.py must be run first for the sake of some book-keeping; for example, run.py will
#       have Alice and Bob populate their private input files which allows for us to combine
#       their horizontally partitioned data into one dataset.

ALICE = 0
BOB = 1

# PURELY FOR TESTING PURPOSES - reduces the amount of data going in by a factor of n to test compilers
# ability to work with different loads
reduce_set = 2  # Anything lower than 49 does not work...

# It appears that batching is maxed out at 128
max_batch = 128


# No traditional command line arguments? Solution is to re-write the script
# using another python script which can also act as the entry point
# @args
alice_examples = 831
bob_examples = 882
n_features = 1875
n_epochs = 13
# end@args

n_examples = alice_examples + bob_examples

data = Matrix(n_examples, n_features, sfix)

# Load data from Alice first, then Bob

# Reference: self.X = MultiArray([N, d, d_in], sfix)
@for_range_opt(alice_examples)
def _(i):
    @for_range_opt(n_features)
    def _(j):
        data[i][j] = sfix.get_input_from(ALICE)
        # sgd.layers[0].X.input_from(ALICE)


print_ln("%s", "\n\n Alice's data is loaded \n\n")


@for_range_opt(bob_examples)
def _(i):
    @for_range_opt(n_features)
    def _(j):
        data[alice_examples + i][j] = sfix.get_input_from(BOB)
        # print_ln("i: %s, j: %s", i, j)
        #sgd.layers[0].X.input_from(BOB)


print_ln("%s", "\n\n Bobs data is loaded \n\n")


labels = Array(n_examples, sfix)

# Load labels from alice first to ensure that the labels remain parallel to the dataset
@for_range_opt(alice_examples)
def _(i):
    labels[i] = sfix.get_input_from(ALICE)
    #sgd.layers[1].Y.input_from(ALICE)


print_ln("%s", "\n\n Alice's labels is loaded \n\n")


@for_range_opt(bob_examples)
def _(i):
    labels[alice_examples + i] = sfix.get_input_from(BOB)
    # print_ln("i: %s", i)
    #sgd.layers[1].Y.input_from(BOB)


print_ln("%s", "\n\n Bobs labels is loaded \n\n")

# Define logistic regression model
sgd = ml.SGD([ml.Dense(max_batch, n_features, 1),
              ml.Output(n_examples, approx=True)], n_epochs,
             report_loss=True)

print_ln("%s", "\n\n model initialized \n\n")

total_iterations = n_examples // max_batch + 1
total_iterations = 1 # For testing purposes

@for_range_opt(total_iterations)
def _(k):
    print_ln("iteration: %s", k)
    @for_range_opt(max_batch)
    def _(i):
        @for_range_opt(n_features)
        def _(j):
            print_ln("%s", "yes")
            sgd.layers[0].X[i][j] = data[k * max_batch + i][j]
            print_ln("%s", "no")
        sgd.layers[1].Y[i] = labels[k * max_batch + i]

print(sgd.layers[0].W)

# sgd.layers[0].X.input_from(0)
# sgd.layers[1].Y.input_from(1)
sgd.reset()  # <--- Causes register overflow?
sgd.run()
