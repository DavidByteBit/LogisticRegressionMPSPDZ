from Compiler import ml
from Compiler import generate_noise
import math

# NOTE: This script should not be run alone. The entry point to run the program is in run.py.
#       run.py must be run first for the sake of some book-keeping; for example, run.py will
#       have Alice and Bob populate their private input files which allows for us to combine
#       their horizontally partitioned data into one dataset.


ALICE = 0
BOB = 1

# No traditional command line arguments? Solution is to re-write the script
# using another python script which can also act as the entry point
# @args
alice_examples = 831
bob_examples = 882
n_features = 1875
n_epochs = 13
folds = 5
lambda_ = 1
batch_size = 128
# end@args

N = alice_examples + bob_examples

train_X = sfix.Matrix(N, n_features)
train_y = sfix.Matrix(N, 1)

alice_X = sfix.Matrix(alice_examples, n_features)
bob_X = sfix.Matrix(bob_examples, n_features)
alice_y = sfix.Matrix(alice_examples, 1)
bob_y = sfix.Matrix(bob_examples, 1)

##### features followed by tragetlabels
alice_X.input_from(0)
alice_y.input_from(0)
bob_X.input_from(1)
bob_y.input_from(1)


########### Create training dataset
@for_range(alice_examples)
def _(i):
    train_X[i].assign_vector(alice_X[i].get_vector())
    train_y[i].assign_vector(alice_y[i].get_vector())


@for_range(bob_examples)
def _(i):
    train_X[i + alice_examples].assign_vector(bob_X[i].get_vector())
    train_y[i + alice_examples].assign_vector(bob_y[i].get_vector())


########### Train simple LR
ml.Layer.back_batch_size = batch_size
# debug = 'debug'

layers = [ml.Dense(N, n_features, 1),
          ml.Output(N, approx=3)]

sgd = ml.SGD(layers, n_epochs, report_loss=True)
sgd.layers[0].X.assign(train_X)
sgd.layers[1].Y.assign(train_y)
sgd.reset()
sgd.run(batch_size=batch_size)

weights = sfix.Array(n_features + 1)


@for_range(n_features)
def _(i):
    weights[i] = layers[0].W[i][0]


weights[n_features] = layers[0].b[0]

print_ln('Bias before noise %s,', weights[n_features].reveal())

noise = generate_noise.gen_noise(n_features + 1, N, epsilon=1, lamb=1)
noisy_weights = sfix.Array(n_features + 1)
print_ln('Bias before noise %s,', weights[n_features].reveal())
print_ln('Noise for Bias %s,', noise[n_features].reveal())
noisy_weights.assign_vector(weights.get_vector() + noise.get_vector())
print_ln('Bias before noise %s,', weights[n_features].reveal())

# if debug:
#    @for_range(402)
#    def _(i):
#        print_ln('%s %s', layers[-1].Y[i].reveal(),
#                 ml.sigmoid(layers[-1].X[i]).reveal())

print_ln('Bias %s,', noisy_weights[n_features].reveal())


# @for_range(n_features)
# def _(i):
#     print_ln('Weight %s,', noisy_weights[i].reveal())
