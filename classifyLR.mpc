from Compiler import ml
# import random
# import re


def dot_product(a, b):
    assert (len(a) == len(b))
    res = 0
    r = len(a)
    i = 0

    while i < r:
        res += a[i] * b[i]
        i += 1

    return res


def sigmoid(a):
    x = 1 / (2.71 ** a)
    return 1 / (1 + x)


ALICE = 0
BOB = 1

# No traditional command line arguments? Solution is to re-write the script
# using another python script which can also act as the entry point
# @args
n_features = 0
alice_examples = 0
bob_examples = 0
# end@args

# program.use_trunc_pr = True
# sfix.round_nearest = True
#
# sfix.set_precision(16, 31)
# cfix.set_precision(16, 31)

test_examples = alice_examples + bob_examples

n_threads = None

# for arg in program.args:
#    m = re.match('n_threads=(.*)', arg)
#    if m:
#       n_threads = int(m.group(1))

program.allocated_mem['s'] = 1 + n_features

# Load the values
bias = sfix.load_mem(0)
weights = sfix.load_mem(1, size=n_features)

# Process the values
dense = ml.Dense(test_examples, n_features, 1)
dense.b[0] = bias
dense.W.assign_vector(weights)

# read the values
bias = dense.b[0].reveal()
weights = dense.W.get_vector().reveal()


print_ln("%s", weights[0])

# # Initialize matrix to hold testing data
# data = Matrix(test_examples, n_features, cint)
# label = Array(test_examples, cint)
#
#
# # First: Testing features
# @for_range(alice_examples)
# def _(i):
#     @for_range(n_features)
#     def _(j):
#         # TODO: It's sloppy to grab a sint then reveal it, should just be cint...
#         data[i][j] = (sint.get_input_from(ALICE)).reveal()
#
#
# @for_range(bob_examples)
# def _(i):
#     @for_range(n_features)
#     def _(j):
#         data[alice_examples + i][j] = (sint.get_input_from(BOB)).reveal()
#
#
# print_ln("%s", "\n\n Testing features collected \n\n")
#
#
# # Second: Testing labels
# @for_range(alice_examples)
# def _(i):
#     label[i] = (sint.get_input_from(ALICE)).reveal()
#
#
# @for_range(bob_examples)
# def _(i):
#     label[alice_examples + i] = (sint.get_input_from(BOB)).reveal()
#
#
# print_ln("%s", "\n\n Testing labels collected \n\n")
#
# correct = 0
# incorrect = 0
#
# @for_range(test_examples)
# def _(i):
#     pred = sigmoid(dot_product(weights, data[i])) >= 0.5
#     @if_e(pred == label[i])
#     def _():
#         correct += 1
#     @else_
#     def _():
#         incorrect += 1
#
# print_ln("correct: %s \n incorrect: %s \n ratio: %s",correct, incorrect, correct/incorrect )
